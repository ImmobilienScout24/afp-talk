== Introduction ==

==== Outline ====

\tableofcontents[currentsection]

==== About Me ====

* Senior System Developer @ Immobilienscout24
* Doing Python and Cloud
* Since 01.12.2015 (Freelancer since June)
* --> Very new to AWS

--1cm--

* Company Twitter: \href{https://twitter.com/IS24\_Developer}{@\@IS24\_Developer@}
* My Twitter: \href{https://twitter.com/esc\_\_\_}{@\@esc\_\_\_@}

== IAM Users and Staic Credentials ==

==== Outline ====

\tableofcontents[currentsection]

==== IAM Users and Static Credentials ====

* IAM Users
* Static Credentials
* This is Badâ„¢

--1cm--

* --> Mine Bitcoins if lost

==== Multi-Account Paradigm ====

* We use multiple accounts
* Reduce blast radius in case of compromise
* Applications communicate over public internet
* Currently in hybrid-mode while migration in progress

== afp-core ==

==== Outline ====

\tableofcontents[currentsection]

==== afp-core ====

* ''Custom Federation Broker''
* Different providers
** AD group provider (humans)
** IP provider       (machines)
* A webapplication
* One of the few places left that ''does'' have static credentials
* Uses ''Secure Token Service'' (STS) and ''AssumeRole''

==== Connect AD --> AWS (Humans) ====

* Special groups in AD: @aws-accout-role@
* AD users are members of such groups
* E.g. @aws\_redecorator\_read-only@
* --> role: @read-only@ in accout @redecorator@
* (Yes it is configurable)

==== Schematic ====

<[center]
<<<images/afp-core.pdf, scale=0.3>>>
[center]>

== afp-web ==

==== Outline ====

\tableofcontents[currentsection]

==== afp-web ====

* Web-frontend for afp-core
* Give an overview of all available accounts and their usable roles for the \
  logged-in user
* Get and show temporary credentials for the selected account and role
* Automatic login to the AWS management console for the desired account

--1cm--

* See also: \href{https://docs.aws.amazon.com/IAM/latest/UserGuide/id\_roles\_providers\_enable-console-custom-url.html}{Creating a URL that Enables Federated Users to Access the AWS Management Console (Custom Federation Broker)}

==== Screenshot ====

TODO

== afp-cli ==

==== Outline ====

\tableofcontents[currentsection]

==== afp-cli ====

* Console/shell frontend for afp-core
* List available accounts and roles
* Open subshell with exported AWS creds
* Alternatively: display or write

==== Install ====[containsverbatim]

<[consolecode]
$ pip install afp-cli
[consolecode]>

--1cm--

* At our company: this just works!
* (Mainly because @https://afp@ can be resolved)

==== Use ====[containsverbatim]

<[consolecode]
$ afp
redecorator     read-only
smarthome       access-all-areas, read-only
$ afp smarthome
...
(AWS: smarthome/access-all-areas 59 min) $ aws s3 ls
...
[consolecode]>

Alternatives --> see @README@

== afp-proxy / alppaca ==

==== Outline ====

\tableofcontents[currentsection]

==== afp-proxy / alppaca ====

* Probably the most interesting component
* Enables temporary credentials for machines
* Provides an ''Instance Metadata Service'' compatible interface

--1cm--

* --> Machines in data-center are ''cloud-ready''

==== Schematic ====

<[center]
<<<images/alppaca.pdf, scale=0.3>>>
[center]>

==== Details ====

* Listens on @169.254.169.254:80@
* Prefetches temporary credentials and stores them in memory
* Always has a valid set of credentials
* No changes to Amazon SDKs needed

== Epilogue ==

==== Outline ====

\tableofcontents[currentsection]

=== Alternatives? ===

* \href{hashicorp/vault}{https://github.com/hashicorp/vault}

--1cm--

* You tell me?

==== Links ====

* All of it is open-source!

* \href{https://immobilienscout24.github.io/afp/}{https://immobilienscout24.github.io/afp/}

